"""Support functions to prepare for LLM call."""

import json


def get_tools_from_topics(all_topic_info: list) -> list:
    """Transforms topic information into tools for the LLM.

    Args:
        all_topic_info: An array of dictionaries, where each dictionary
            represents the topic and the intents under that specific topic.

    Returns:
        An array of LLM compatible tools corresponding to each topics.
    """
    topic_to_tools = []
    for topic_info in all_topic_info:
        topic_to_tools.append({
            'type': 'function',
            'function': {
                'name': topic_info['name'],
                'description': topic_info['description']
            },
        })

    return topic_to_tools


def get_tools_from_intents(all_topic_info: list, topic: str) -> list:
    """Transforms intent information into tools for the LLM.

    Args:
        all_topic_info: An array of dictionaries, where each dictionary
            represents the topic and the intents under that specific topic.
        topic: The name of the topic to parse intents from.

    Returns:
        An array of LLM compatible tools corresponding to each intents under the specified topic.
    """
    intent_to_tools = []

    intents = []
    for topic_info in all_topic_info:
        if topic_info['name'] == topic:
            intents = topic_info['intents']

    for intent in intents:
        params = {}
        if "entities" in intent:
            params = get_params_from_entities(intent["entities"])
        intent_to_tools.append({
            'type': 'function',
            'function': {
                'name': intent['name'],
                'description': intent['description'],
                'parameters': params,
            },
        })

    return intent_to_tools


def get_params_from_entities(entities: list) -> dict:
    """Creats API compatible params from the provided entities

    Args:
        entities: List of entities extracted from the YAML for an intent

    Returns:
        A dictionary of API compatible parameters.
    """
    params = {
          'type': 'object',
          'properties': {},
        }
    for entity in entities:
        entity_name = entity["name"]
        entity_type = entity["type"]
        entity_description = entity["description"]

        params['properties'][entity_name] = {'type': entity_type, 'description': entity_description}

    return params


def valid_extracted_tool_params(extracted_intent_tool: dict, intent_tools: list) -> dict:
    """Validates extracted tool parameters with actual allowed tool parameters

    Args:
        extracted_intent_tool: The intent in the form of a tool, as generated by the LLM.
        intent_tools: All available intents in the form of tools.

    Returns:
        A dictionary of allowed tool parameters for the extracted intent.
    """
    intent_name = extracted_intent_tool.name
    extracted_params = json.loads(extracted_intent_tool.arguments)

    actual_intent_params = {}
    for intent in intent_tools:
        if intent_name == intent["function"]["name"] and intent["function"]["parameters"]:
            actual_intent_params = intent["function"]["parameters"]["properties"]

    validated_intent_params = {}
    for key, _ in actual_intent_params.items():
        if key in extracted_params:
            validated_intent_params[key] = extracted_params[key]

    return validated_intent_params
